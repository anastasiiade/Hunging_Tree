import random
import time
import g4f
import os


def load_words_from_file(filename="russian_words.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(filename):
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏.")
        return None

    categories = {}
    current_category = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    with open(filename, "r", encoding="utf-8") as file:
        for line in file:
            line = line.strip()
            if not line:
                continue
            if line.startswith("#"):
                current_category = line[1:].strip()
                categories[current_category] = []
            else:
                categories.setdefault(current_category, []).append(line.lower())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    if not categories:
        print(f"–§–∞–π–ª {filename} –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —Å–ª–æ–≤!")
        return None

    return categories


def get_hint(word, category, guessed_letters):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{
                'role': 'system',
                'content': f"–î–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–ª–æ–≤–∞ '{word}' (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –≤ –∏–≥—Ä–µ '–í–∏—Å–µ–ª–∏—Ü–∞', –Ω–µ –Ω–∞–∑—ã–≤–∞—è —Å–∞–º–æ —Å–ª–æ–≤–æ. –£–∂–µ —É–≥–∞–¥–∞–Ω—ã –±—É–∫–≤—ã: {', '.join(guessed_letters)}. –û—Ç–≤–µ—Ç—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
            }],
            timeout=15
        )
        return response if response else f"–°–ª–æ–≤–æ —Å–≤—è–∑–∞–Ω–æ —Å: {category}"
    except Exception as e:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –µ—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        hidden_letters = [c for c in word if c not in guessed_letters]
        sample = random.sample(hidden_letters, min(3, len(hidden_letters)))
        return f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±—É–∫–≤—ã: {', '.join(sample)}"


def draw_hangman(attempts_left):
    """–†–∏—Å—É–µ–º –≤–∏—Å–µ–ª–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ø—ã—Ç–æ–∫"""
    stages = [
                """
           ------
           |    |
           |    
           |    
           |    
           |
        --------
        """,

        """
           ------
           |    |
           |    O
           |    
           |    
           |
        --------
        """,

        """
           ------
           |    |
           |    O
           |    |
           |    
           |
        --------
        """,

        """
           ------
           |    |
           |    O
           |   /|
           |    
           |
        --------
        """,

        """
           ------
           |    |
           |    O
           |   /|\\
           |    
           |
        --------
        """,

        """
           ------
           |    |
           |    O
           |   /|\\
           |   / 
           |
        --------
        """,

        """
           ------
           |    |
           |    O
           |   /|\\
           |   / \\
           |
        --------

        """

    ]
    print(stages[6 - attempts_left])


def select_word(words):
    """–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    category = random.choice(list(words.keys()))
    word = random.choice(words[category])
    return word, category


def play_game(words):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã"""
    word, category = select_word(words)
    word = word.lower()
    guessed_letters = []
    attempts = 6
    hint_used = False

    print("\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–í–∏—Å–µ–ª–∏—Ü–∞'!")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    print(f"–°–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(word)} –±—É–∫–≤")
    draw_hangman(attempts)

    while attempts > 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ–≤–∞
        display = [letter if letter in guessed_letters else "_" for letter in word]
        print("\n–°–ª–æ–≤–æ:", " ".join(display))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if all(letter in guessed_letters for letter in word):
            print(f"\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {word.upper()}!")
            return True

        # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        print("\n1 - –£–≥–∞–¥–∞—Ç—å –±—É–∫–≤—É")
        print("2 - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1/2): ").strip()

        if choice == "1":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –±—É–∫–≤—ã
            guess = input("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: ").lower().strip()

            if len(guess) != 1 or not guess.isalpha():
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É!")
                continue

            if guess in guessed_letters:
                print("–í—ã —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏ —ç—Ç—É –±—É–∫–≤—É!")
                continue

            guessed_letters.append(guess)

            if guess not in word:
                attempts -= 1
                print(f"\n–ù–µ—Ç —Ç–∞–∫–æ–π –±—É–∫–≤—ã! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}")
                draw_hangman(attempts)
                if attempts == 0:
                    print(f"\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {word.upper()}")
                    return False
            else:
                print("\n–í–µ—Ä–Ω–æ! –≠—Ç–∞ –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ.")

        elif choice == "2":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            if not hint_used:
                print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏...")
                hint = get_hint(word, category, guessed_letters)
                print(f"\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")
                hint_used = True
                time.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            else:
                print("\n–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É!")
        else:
            print("\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")


if __name__ == "__main__":
    print("–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞' —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    print("----------------------------------------")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
    words = load_words_from_file()
    if not words:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã.")
        exit()

    while True:
        result = play_game(words)

        if result:
            print("–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
        else:
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üí™")

        again = input("\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë? (–¥–∞/–Ω–µ—Ç): ").lower()
        if again not in ["–¥–∞", "–¥", "yes", "y"]:
            print("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break